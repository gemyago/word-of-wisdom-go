// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockWowQuery is an autogenerated mock type for the mockWowQuery type
type MockWowQuery struct {
	mock.Mock
}

type MockWowQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWowQuery) EXPECT() *MockWowQuery_Expecter {
	return &MockWowQuery_Expecter{mock: &_m.Mock}
}

// GetNextWoW provides a mock function with given fields: _a0
func (_m *MockWowQuery) GetNextWoW(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetNextWoW")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWowQuery_GetNextWoW_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextWoW'
type MockWowQuery_GetNextWoW_Call struct {
	*mock.Call
}

// GetNextWoW is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockWowQuery_Expecter) GetNextWoW(_a0 interface{}) *MockWowQuery_GetNextWoW_Call {
	return &MockWowQuery_GetNextWoW_Call{Call: _e.mock.On("GetNextWoW", _a0)}
}

func (_c *MockWowQuery_GetNextWoW_Call) Run(run func(_a0 context.Context)) *MockWowQuery_GetNextWoW_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWowQuery_GetNextWoW_Call) Return(_a0 string, _a1 error) *MockWowQuery_GetNextWoW_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWowQuery_GetNextWoW_Call) RunAndReturn(run func(context.Context) (string, error)) *MockWowQuery_GetNextWoW_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWowQuery creates a new instance of MockWowQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWowQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWowQuery {
	mock := &MockWowQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
