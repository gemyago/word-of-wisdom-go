// Code generated by mockery. DO NOT EDIT.

//go:build !release

package challenges

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockChallenges is an autogenerated mock type for the Challenges type
type MockChallenges struct {
	mock.Mock
}

type MockChallenges_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChallenges) EXPECT() *MockChallenges_Expecter {
	return &MockChallenges_Expecter{mock: &_m.Mock}
}

// GenerateNewChallenge provides a mock function with given fields: clientID
func (_m *MockChallenges) GenerateNewChallenge(clientID string) (string, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewChallenge")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChallenges_GenerateNewChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateNewChallenge'
type MockChallenges_GenerateNewChallenge_Call struct {
	*mock.Call
}

// GenerateNewChallenge is a helper method to define mock.On call
//   - clientID string
func (_e *MockChallenges_Expecter) GenerateNewChallenge(clientID interface{}) *MockChallenges_GenerateNewChallenge_Call {
	return &MockChallenges_GenerateNewChallenge_Call{Call: _e.mock.On("GenerateNewChallenge", clientID)}
}

func (_c *MockChallenges_GenerateNewChallenge_Call) Run(run func(clientID string)) *MockChallenges_GenerateNewChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChallenges_GenerateNewChallenge_Call) Return(_a0 string, _a1 error) *MockChallenges_GenerateNewChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChallenges_GenerateNewChallenge_Call) RunAndReturn(run func(string) (string, error)) *MockChallenges_GenerateNewChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// SolveChallenge provides a mock function with given fields: ctx, complexity, challenge
func (_m *MockChallenges) SolveChallenge(ctx context.Context, complexity int, challenge string) (string, error) {
	ret := _m.Called(ctx, complexity, challenge)

	if len(ret) == 0 {
		panic("no return value specified for SolveChallenge")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (string, error)); ok {
		return rf(ctx, complexity, challenge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) string); ok {
		r0 = rf(ctx, complexity, challenge)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, complexity, challenge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChallenges_SolveChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SolveChallenge'
type MockChallenges_SolveChallenge_Call struct {
	*mock.Call
}

// SolveChallenge is a helper method to define mock.On call
//   - ctx context.Context
//   - complexity int
//   - challenge string
func (_e *MockChallenges_Expecter) SolveChallenge(ctx interface{}, complexity interface{}, challenge interface{}) *MockChallenges_SolveChallenge_Call {
	return &MockChallenges_SolveChallenge_Call{Call: _e.mock.On("SolveChallenge", ctx, complexity, challenge)}
}

func (_c *MockChallenges_SolveChallenge_Call) Run(run func(ctx context.Context, complexity int, challenge string)) *MockChallenges_SolveChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockChallenges_SolveChallenge_Call) Return(_a0 string, _a1 error) *MockChallenges_SolveChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChallenges_SolveChallenge_Call) RunAndReturn(run func(context.Context, int, string) (string, error)) *MockChallenges_SolveChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// VerifySolution provides a mock function with given fields: complexity, challenge, solution
func (_m *MockChallenges) VerifySolution(complexity int, challenge string, solution string) bool {
	ret := _m.Called(complexity, challenge, solution)

	if len(ret) == 0 {
		panic("no return value specified for VerifySolution")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string, string) bool); ok {
		r0 = rf(complexity, challenge, solution)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockChallenges_VerifySolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySolution'
type MockChallenges_VerifySolution_Call struct {
	*mock.Call
}

// VerifySolution is a helper method to define mock.On call
//   - complexity int
//   - challenge string
//   - solution string
func (_e *MockChallenges_Expecter) VerifySolution(complexity interface{}, challenge interface{}, solution interface{}) *MockChallenges_VerifySolution_Call {
	return &MockChallenges_VerifySolution_Call{Call: _e.mock.On("VerifySolution", complexity, challenge, solution)}
}

func (_c *MockChallenges_VerifySolution_Call) Run(run func(complexity int, challenge string, solution string)) *MockChallenges_VerifySolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChallenges_VerifySolution_Call) Return(_a0 bool) *MockChallenges_VerifySolution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChallenges_VerifySolution_Call) RunAndReturn(run func(int, string, string) bool) *MockChallenges_VerifySolution_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChallenges creates a new instance of MockChallenges. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChallenges(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChallenges {
	mock := &MockChallenges{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
