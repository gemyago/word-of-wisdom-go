// Code generated by mockery. DO NOT EDIT.

//go:build !release

package commands

import (
	context "context"
	app "word-of-wisdom-go/internal/app"

	mock "github.com/stretchr/testify/mock"
)

// mockRequestRateMonitor is an autogenerated mock type for the requestRateMonitor type
type mockRequestRateMonitor struct {
	mock.Mock
}

type mockRequestRateMonitor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRequestRateMonitor) EXPECT() *mockRequestRateMonitor_Expecter {
	return &mockRequestRateMonitor_Expecter{mock: &_m.Mock}
}

// RecordRequest provides a mock function with given fields: ctx, clientID
func (_m *mockRequestRateMonitor) RecordRequest(ctx context.Context, clientID string) (app.RecordRequestResult, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for RecordRequest")
	}

	var r0 app.RecordRequestResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (app.RecordRequestResult, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) app.RecordRequestResult); ok {
		r0 = rf(ctx, clientID)
	} else {
		r0 = ret.Get(0).(app.RecordRequestResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRequestRateMonitor_RecordRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordRequest'
type mockRequestRateMonitor_RecordRequest_Call struct {
	*mock.Call
}

// RecordRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *mockRequestRateMonitor_Expecter) RecordRequest(ctx interface{}, clientID interface{}) *mockRequestRateMonitor_RecordRequest_Call {
	return &mockRequestRateMonitor_RecordRequest_Call{Call: _e.mock.On("RecordRequest", ctx, clientID)}
}

func (_c *mockRequestRateMonitor_RecordRequest_Call) Run(run func(ctx context.Context, clientID string)) *mockRequestRateMonitor_RecordRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockRequestRateMonitor_RecordRequest_Call) Return(_a0 app.RecordRequestResult, _a1 error) *mockRequestRateMonitor_RecordRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRequestRateMonitor_RecordRequest_Call) RunAndReturn(run func(context.Context, string) (app.RecordRequestResult, error)) *mockRequestRateMonitor_RecordRequest_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRequestRateMonitor creates a new instance of mockRequestRateMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRequestRateMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRequestRateMonitor {
	mock := &mockRequestRateMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
