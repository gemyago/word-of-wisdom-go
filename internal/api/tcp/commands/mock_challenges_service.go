// Code generated by mockery. DO NOT EDIT.

//go:build !release

package commands

import mock "github.com/stretchr/testify/mock"

// mockChallengesService is an autogenerated mock type for the challengesService type
type mockChallengesService struct {
	mock.Mock
}

type mockChallengesService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockChallengesService) EXPECT() *mockChallengesService_Expecter {
	return &mockChallengesService_Expecter{mock: &_m.Mock}
}

// GenerateNewChallenge provides a mock function with given fields: clientID
func (_m *mockChallengesService) GenerateNewChallenge(clientID string) (string, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewChallenge")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockChallengesService_GenerateNewChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateNewChallenge'
type mockChallengesService_GenerateNewChallenge_Call struct {
	*mock.Call
}

// GenerateNewChallenge is a helper method to define mock.On call
//   - clientID string
func (_e *mockChallengesService_Expecter) GenerateNewChallenge(clientID interface{}) *mockChallengesService_GenerateNewChallenge_Call {
	return &mockChallengesService_GenerateNewChallenge_Call{Call: _e.mock.On("GenerateNewChallenge", clientID)}
}

func (_c *mockChallengesService_GenerateNewChallenge_Call) Run(run func(clientID string)) *mockChallengesService_GenerateNewChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockChallengesService_GenerateNewChallenge_Call) Return(_a0 string, _a1 error) *mockChallengesService_GenerateNewChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockChallengesService_GenerateNewChallenge_Call) RunAndReturn(run func(string) (string, error)) *mockChallengesService_GenerateNewChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// VerifySolution provides a mock function with given fields: complexity, challenge, solution
func (_m *mockChallengesService) VerifySolution(complexity int, challenge string, solution string) bool {
	ret := _m.Called(complexity, challenge, solution)

	if len(ret) == 0 {
		panic("no return value specified for VerifySolution")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, string, string) bool); ok {
		r0 = rf(complexity, challenge, solution)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockChallengesService_VerifySolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifySolution'
type mockChallengesService_VerifySolution_Call struct {
	*mock.Call
}

// VerifySolution is a helper method to define mock.On call
//   - complexity int
//   - challenge string
//   - solution string
func (_e *mockChallengesService_Expecter) VerifySolution(complexity interface{}, challenge interface{}, solution interface{}) *mockChallengesService_VerifySolution_Call {
	return &mockChallengesService_VerifySolution_Call{Call: _e.mock.On("VerifySolution", complexity, challenge, solution)}
}

func (_c *mockChallengesService_VerifySolution_Call) Run(run func(complexity int, challenge string, solution string)) *mockChallengesService_VerifySolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockChallengesService_VerifySolution_Call) Return(_a0 bool) *mockChallengesService_VerifySolution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockChallengesService_VerifySolution_Call) RunAndReturn(run func(int, string, string) bool) *mockChallengesService_VerifySolution_Call {
	_c.Call.Return(run)
	return _c
}

// newMockChallengesService creates a new instance of mockChallengesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockChallengesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockChallengesService {
	mock := &mockChallengesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
